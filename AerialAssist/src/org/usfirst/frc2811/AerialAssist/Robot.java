// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2811.AerialAssist;


import edu.wpi.first.wpilibj.DriverStationLCD;
import edu.wpi.first.wpilibj.DriverStationLCD.Line;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc2811.AerialAssist.commands.*;
import org.usfirst.frc2811.AerialAssist.subsystems.*;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
        public static DriverStationLCD dsText;

    Command autonomousCommand;
    

    public static OI oi;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Rollers rollers;
    public static Chassis chassis;
    public static Lifter lifter;;
    public static Shooter shooter;
    public static Punter punter;
    public static AngleManager angleManager; 
    public static Map map;
    public static JoystickControl joystickcontrol;
    
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rollers = new Rollers();
        chassis = new Chassis();
        lifter = new Lifter();
        shooter = new Shooter();
        punter = new Punter();
        angleManager = new AngleManager();
        map = new Map();
        joystickcontrol = new JoystickControl();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        oi = new OI();
	
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousCommand();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
	// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
         
        
       
        
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
        
        
           DriverStationLCD.getInstance().println(Line.kUser1, 1, "Motor Temperatures:" + " ");
           DriverStationLCD.getInstance().println(Line.kUser2, 1, "Motor 1 = " + RobotMap.temp1.getValue() + " ");
           DriverStationLCD.getInstance().println(Line.kUser3, 1, "Motor 2 = " + RobotMap.temp2.getValue() + " ");
           
           DriverStationLCD.getInstance().updateLCD();

        
        
    }

    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    /* FIXME Robots don't quit error
     * Source code is availible below, which may help with finding the issues
     * https://github.com/jesusrambo/WPILIBJ/blob/8e85cdf7fe89ea46d1a0c57d6a038a71223d8a10/WPILibJ/src/edu/wpi/first/wpilibj/IterativeRobot.java
     *  I suspect the issue is with the Autonomous code, and is probably a good place to start.
    /*
    public void startCompetition(){
        //calls robotInit()
    
        while(true){
            //calls autonomousInit() once
            //calls autonamousPeriodic() repeatedly
            //calls autonamousContinous() repeatedly without delays between them

            //Calls teleopInit() once
            //calls teleopPeriodic() repeatedly
            //calls teleopContinuous() repeatedly with no delays

            //feeds watchdog
    
            //this function should never return, save for errors
        }
    }
    //*/
}
